# .github/workflows/deploy.yml
name: Deploy Nexus Orchestrator

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  # Set your GitHub Container Registry (GHCR) details
  # Replace 'peteywee' with your actual GitHub username
  GHCR_OWNER: peteywee
  # Replace 'nexus-orchestrator-project2' with your actual GitHub repository name
  GHCR_REPO: nexus-orchestrator-project2

jobs:
  deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub Actions

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Checkout your repository code

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ensure consistency with your Dockerfile

      - name: Install Jinja2
        run: |
          pip install Jinja2

      - name: Generate Agent Files
        run: |
          python3 generate_agents.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Essential for multi-platform builds

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Uses the GitHub Actions default user
          password: ${{ secrets.CR_PAT }} # Your GHCR_PAT secret

      # Build and push gpt-nexus image
      - name: Build and Push gpt-nexus Image
        run: |
          docker build -t ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-nexus:latest ./gpt-nexus
          docker push ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-nexus:latest

      # Build and push gpt-agent_comms image
      - name: Build and Push gpt-agent_comms Image
        run: |
          docker build -t ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-comms:latest ./gpt-agent_comms
          docker push ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-comms:latest

      # Build and push gpt-agent_ops_execution image
      - name: Build and Push gpt-agent_ops_execution Image
        run: |
          docker build -t ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-ops-execution:latest ./gpt-agent_ops_execution
          docker push ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-ops-execution:latest

      # Build and push gpt-agent_research image
      - name: Build and Push gpt-agent_research Image
        run: |
          docker build -t ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-research:latest ./gpt-agent_research
          docker push ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-research:latest

      # Build and push gpt-agent_strategy image
      - name: Build and Push gpt-agent_strategy Image
        run: |
          docker build -t ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-strategy:latest ./gpt-agent_strategy
          docker push ghcr.io/${{ env.GHCR_OWNER }}/${{ env.GHCR_REPO }}/gpt-agent-strategy:latest

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root/nexus_orchestrator_project/
            
            # --- Secret Management for .env file ---
            # Re-create the .env file using: echo "CONTENT" > .env
            # You can pass .env contents as DOT_ENV_CONTENT secret
            
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.CR_PAT }}
            # Pull the latest images from GHCR
            docker-compose pull

            # Restart services to use the new images
            docker-compose up -d --remove-orphans

            # Clean up old Docker images
            docker image prune -f
